name: Deploy Fullstack App to EC2

on:
  push:
    branches:
      - main

env:
  BACKEND_IMAGE: dxorud/chatbot_backend
  FRONTEND_IMAGE: dxorud/chatbot_frontend

  EC2_HOST: ${{ secrets.HOST }}
  EC2_USERNAME: ${{ secrets.USERNAME }}
  EC2_KEY: ${{ secrets.KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout source code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Generate .env for Backend
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > ./backend/.env
          echo "ENV=production" >> ./backend/.env
          echo "BACKEND_DOMAIN=https://advanced-closely-garfish.ngrok-free.app" >> ./backend/.env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ./backend/.env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ./backend/.env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> ./backend/.env

      - name: ‚öôÔ∏è Generate .env for Frontend
        run: |
          echo "VITE_API_URL=https://bass-worthy-actively.ngrok-free.app" > ./frontend/.env

      - name: ‚öôÔ∏è Generate ngrok config files
        run: |
          mkdir -p ./ngrok

          cat <<EOF > ./ngrok/ngrok_b.yaml
          version: 3
          agent:
            authtoken: ${{ secrets.NGROK_AUTH_TOKEN_BACKEND }}
          tunnels:
            backend:
              proto: http
              addr: 5000
              hostname: advanced-closely-garfish.ngrok-free.app
          EOF

          cat <<EOF > ./ngrok/ngrok_a.yaml
          version: 3
          agent:
            authtoken: ${{ secrets.NGROK_AUTH_TOKEN_FRONTEND }}
          tunnels:
            frontend:
              proto: http
              addr: 5173
              hostname: bass-worthy-actively.ngrok-free.app
          EOF

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: üê≥ Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest
          no-cache: true

      - name: üê≥ Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:latest
          no-cache: true

      - name: üì¶ Archive config files
        run: |
          tar -czf deploy_files.tar.gz \
            backend/.env \
            frontend/.env \
            ngrok/ngrok_a.yaml \
            ngrok/ngrok_b.yaml

      - name: üì§ Upload config files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_KEY }}
          source: deploy_files.tar.gz
          target: /home/${{ env.EC2_USERNAME }}

      - name: üöÄ Deploy and Restart on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_KEY }}
          port: 22
          script: |
            cd /home/${{ env.EC2_USERNAME }}

            tar -xzf deploy_files.tar.gz
            rm deploy_files.tar.gz

            docker rm -f backend || true
            docker rm -f frontend || true

            docker pull ${{ env.BACKEND_IMAGE }}:latest
            docker pull ${{ env.FRONTEND_IMAGE }}:latest

            docker run -d \
              --name backend \
              --restart unless-stopped \
              --env-file backend/.env \
              -p 5000:5000 \
              ${{ env.BACKEND_IMAGE }}:latest

            docker run -d \
              --name frontend \
              --restart unless-stopped \
              --env-file frontend/.env \
              -p 5173:5173 \
              ${{ env.FRONTEND_IMAGE }}:latest

            mkdir -p logs

            nohup ngrok start --all --config ngrok/ngrok_b.yaml > logs/ngrok_backend.log 2>&1 &
            nohup ngrok start --all --config ngrok/ngrok_a.yaml > logs/ngrok_frontend.log 2>&1 &
