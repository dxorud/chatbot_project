name: Deploy Fullstack App to EC2

on:
  push:
    branches:
      - main

env:
  BACKEND_IMAGE: dxorud/chatbot_backend
  FRONTEND_IMAGE: dxorud/chatbot_frontend

  EC2_HOST: ${{ secrets.HOST }}
  EC2_USERNAME: ${{ secrets.USERNAME }}
  EC2_KEY: ${{ secrets.KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      # ✅ .env 파일 생성 및 저장
      - name: Generate .env for Backend
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > ./backend/.env
          echo "ENV=production" >> ./backend/.env
          echo "BACKEND_DOMAIN=https://advanced-closely-garfish.ngrok-free.app" >> ./backend/.env

      - name: Generate .env for Frontend
        run: |
          echo "VITE_API_URL=https://bass-worthy-actively.ngrok-free.app" > ./frontend/.env

      # ✅ ngrok 설정 파일 생성
      - name: Generate ngrok config files
        run: |
          mkdir -p ./ngrok
          echo "version: 3" > ./ngrok/ngrok_b.yaml
          echo "agent:" >> ./ngrok/ngrok_b.yaml
          echo "  authtoken: ${{ secrets.NGROK_AUTH_TOKEN_BACKEND }}" >> ./ngrok/ngrok_b.yaml
          echo "tunnels:" >> ./ngrok/ngrok_b.yaml
          echo "  backend:" >> ./ngrok/ngrok_b.yaml
          echo "    proto: http" >> ./ngrok/ngrok_b.yaml
          echo "    addr: 5000" >> ./ngrok/ngrok_b.yaml
          echo "    hostname: advanced-closely-garfish.ngrok-free.app" >> ./ngrok/ngrok_b.yaml

          echo "version: 3" > ./ngrok/ngrok_a.yaml
          echo "agent:" >> ./ngrok/ngrok_a.yaml
          echo "  authtoken: ${{ secrets.NGROK_AUTH_TOKEN_FRONTEND }}" >> ./ngrok/ngrok_a.yaml
          echo "tunnels:" >> ./ngrok/ngrok_a.yaml
          echo "  frontend:" >> ./ngrok/ngrok_a.yaml
          echo "    proto: http" >> ./ngrok/ngrok_a.yaml
          echo "    addr: 5173" >> ./ngrok/ngrok_a.yaml
          echo "    hostname: bass-worthy-actively.ngrok-free.app" >> ./ngrok/ngrok_a.yaml

      # ✅ Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # ✅ Backend 이미지 빌드 & 푸시
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest
          no-cache: true

      # ✅ Frontend 이미지 빌드 & 푸시
      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:latest
          no-cache: true

      # ✅ 필요한 설정 파일 압축
      - name: Archive config files
        run: |
          tar -czf deploy_files.tar.gz \
            backend/.env \
            frontend/.env \
            ngrok/ngrok_a.yaml \
            ngrok/ngrok_b.yaml

      # ✅ EC2로 전송
      - name: Upload config files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_KEY }}
          source: deploy_files.tar.gz
          target: /home/${{ env.EC2_USERNAME }}

      # ✅ EC2에서 배포 및 ngrok 실행
      - name: Deploy and Restart on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_KEY }}
          port: 22
          script: |
            cd /home/${{ env.EC2_USERNAME }}

            echo "📦 Extracting deployment files..."
            tar -xzf deploy_files.tar.gz
            rm deploy_files.tar.gz

            echo "🛑 Stopping old containers..."
            docker rm -f backend || true
            docker rm -f frontend || true

            echo "🐳 Running backend container..."
            docker run -d \
              --name backend \
              --restart unless-stopped \
              --env-file backend/.env \
              -p 5000:5000 \
              ${{ env.BACKEND_IMAGE }}:latest

            echo "🐳 Running frontend container..."
            docker run -d \
              --name frontend \
              --restart unless-stopped \
              --env-file frontend/.env \
              -p 5173:5173 \
              ${{ env.FRONTEND_IMAGE }}:latest

            echo "📂 Creating logs directory..."
            mkdir -p logs

            echo "🚀 Starting ngrok backend..."
            nohup ngrok start --all --config ngrok/ngrok_b.yaml > logs/ngrok_backend.log 2>&1 &

            echo "🚀 Starting ngrok frontend..."
            nohup ngrok start --all --config ngrok/ngrok_a.yaml > logs/ngrok_frontend.log 2>&1 &
