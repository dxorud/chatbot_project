name: Deploy Fullstack App to EC2

on:
  push:
    branches:
      - main

env:
  BACKEND_IMAGE: dxorud/chatbot_backend
  FRONTEND_IMAGE: dxorud/chatbot_frontend

  EC2_HOST: ${{ secrets.HOST }}
  EC2_USERNAME: ${{ secrets.USERNAME }}
  EC2_KEY: ${{ secrets.KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Generate .env for Backend
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > ./backend/.env
          echo "ENV=production" >> ./backend/.env
          echo "BACKEND_DOMAIN=https://advanced-closely-garfish.ngrok-free.app" >> ./backend/.env

      - name: Generate .env for Frontend
        run: |
          echo "VITE_API_URL=https://bass-worthy-actively.ngrok-free.app" > ./frontend/.env

      # >>>>>>>>>> ngrok config 파일 생성 스텝 시작 <<<<<<<<<<
      # ngrok_b.yaml 파일 생성 (backend)
      - name: Generate ngrok_b.yaml for Backend
        run: |
          echo "authtoken: ${{ secrets.NGROK_AUTH_TOKEN_BACKEND }}" > ./backend/ngrok_b.yaml
          echo "tunnels:" >> ./backend/ngrok_b.yaml
          echo "  backend:" >> ./backend/ngrok_b.yaml # ngrok_b.yaml 내용과 일치시킴
          echo "    proto: http" >> ./backend/ngrok_b.yaml
          echo "    addr: 5000" >> ./backend/ngrok_b.yaml
          echo "    hostname: advanced-closely-garfish.ngrok-free.app" >> ./backend/ngrok_b.yaml # ngrok_b.yaml 내용과 일치시킴

      # ngrok_a.yaml 파일 생성 (frontend)
      - name: Generate ngrok_a.yaml for Frontend
        run: |
          echo "authtoken: ${{ secrets.NGROK_AUTH_TOKEN_FRONTEND }}" > ./frontend/ngrok_a.yaml
          echo "tunnels:" >> ./frontend/ngrok_a.yaml
          echo "  frontend:" >> ./frontend/ngrok_a.yaml # ngrok_a.yaml 내용과 일치시킴
          echo "    proto: http" >> ./frontend/ngrok_a.yaml
          echo "    addr: 5173" >> ./frontend/ngrok_a.yaml
          echo "    hostname: bass-worthy-actively.ngrok-free.app" >> ./frontend/ngrok_a.yaml # ngrok_a.yaml 내용과 일치시킴
      # >>>>>>>>>> ngrok config 파일 생성 스텝 끝 <<<<<<<<<<
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:latest

      - name: Check ngrok config files exist
        run: |
          test -f backend/ngrok_b.yaml || { echo "❌ backend/ngrok_b.yaml 없음"; exit 1; }
          test -f frontend/ngrok_a.yaml || { echo "❌ frontend/ngrok_a.yaml 없음"; exit 1; }

      - name: Debug ngrok config files
        run: |
          echo "✅ 파일 목록 및 용량 확인"
          ls -lh backend/ngrok_b.yaml frontend/ngrok_a.yaml
          echo "✅ backend/ngrok_b.yaml 내용 확인"
          cat backend/ngrok_b.yaml
          echo "✅ frontend/ngrok_a.yaml 내용 확인"
          cat frontend/ngrok_a.yaml

      # >>>>>>>>>> scp source 경로 수정 시작 <<<<<<<<<<
      - name: Upload ngrok config files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_KEY }}
          source: |
            ./backend/ngrok_b.yaml  # 상대 경로임을 명시
            ./frontend/ngrok_a.yaml # 상대 경로임을 명시
          target: /home/${{ env.EC2_USERNAME }}
      # >>>>>>>>>> scp source 경로 수정 끝 <<<<<<<<<<

      - name: Deploy to EC2 and Run Containers + ngrok
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            echo "Pulling latest Docker images..."
            docker pull ${{ env.BACKEND_IMAGE }}:latest
            docker pull ${{ env.FRONTEND_IMAGE }}:latest

            echo "Stopping and removing old containers..."
            docker rm -f backend || true
            docker rm -f frontend || true

            echo "Creating backend .env file on EC2..."
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > /home/${{ env.EC2_USERNAME }}/backend.env
            echo "ENV=production" >> /home/${{ env.EC2_USERNAME }}/backend.env
            echo "BACKEND_DOMAIN=https://advanced-closely-garfish.ngrok-free.app" >> /home/${{ env.EC2_USERNAME }}/backend.env

            echo "Running backend container on port 5000..."
            docker run -d \
              --name backend \
              --restart unless-stopped \
              --env-file /home/${{ env.EC2_USERNAME }}/backend.env \
              -p 5000:5000 \
              ${{ env.BACKEND_IMAGE }}:latest

            echo "Running frontend container on port 5173..."
            docker run -d \
              --name frontend \
              --restart unless-stopped \
              -p 5173:5173 \
              ${{ env.FRONTEND_IMAGE }}:latest

            echo "Running ngrok for backend..."
            nohup ngrok start --all --config /home/${{ env.EC2_USERNAME }}/ngrok_b.yaml > /home/${{ env.EC2_USERNAME }}/ngrok_backend.log 2>&1 &

            echo "Running ngrok for frontend..."
            nohup ngrok start --all --config /home/${{ env.EC2_USERNAME }}/ngrok_a.yaml > /home/${{ env.EC2_USERNAME }}/ngrok_frontend.log 2>&1 &
