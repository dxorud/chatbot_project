name: Deploy Fullstack App to EC2

on:
  push:
    branches:
      - main

env:
  BACKEND_IMAGE: dxorud/chatbot_backend
  FRONTEND_IMAGE: dxorud/chatbot_frontend

  EC2_HOST: ${{ secrets.HOST }}
  EC2_USERNAME: ${{ secrets.USERNAME }}
  EC2_KEY: ${{ secrets.KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      # ✅ 루트에 .env 생성 후 backend로 복사
      - name: Generate .env for Backend
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
          echo "ENV=production" >> .env
          echo "BACKEND_DOMAIN=https://advanced-closely-garfish.ngrok-free.app" >> .env
          cp .env ./backend/.env

      - name: Generate .env for Frontend
        run: |
          echo "VITE_API_URL=https://bass-worthy-actively.ngrok-free.app" > ./frontend/.env

      # ✅ ngrok_b.yaml (Backend) - v3 형식
      - name: Generate ngrok_b.yaml for Backend
        run: |
          echo "version: 3" > ./backend/ngrok_b.yaml
          echo "agent:" >> ./backend/ngrok_b.yaml
          echo "  authtoken: ${{ secrets.NGROK_AUTH_TOKEN_BACKEND }}" >> ./backend/ngrok_b.yaml
          echo "tunnels:" >> ./backend/ngrok_b.yaml
          echo "  backend:" >> ./backend/ngrok_b.yaml
          echo "    proto: http" >> ./backend/ngrok_b.yaml
          echo "    addr: 5000" >> ./backend/ngrok_b.yaml
          echo "    hostname: advanced-closely-garfish.ngrok-free.app" >> ./backend/ngrok_b.yaml

      # ✅ ngrok_a.yaml (Frontend) - v3 형식
      - name: Generate ngrok_a.yaml for Frontend
        run: |
          echo "version: 3" > ./frontend/ngrok_a.yaml
          echo "agent:" >> ./frontend/ngrok_a.yaml
          echo "  authtoken: ${{ secrets.NGROK_AUTH_TOKEN_FRONTEND }}" >> ./frontend/ngrok_a.yaml
          echo "tunnels:" >> ./frontend/ngrok_a.yaml
          echo "  frontend:" >> ./frontend/ngrok_a.yaml
          echo "    proto: http" >> ./frontend/ngrok_a.yaml
          echo "    addr: 5173" >> ./frontend/ngrok_a.yaml
          echo "    hostname: bass-worthy-actively.ngrok-free.app" >> ./frontend/ngrok_a.yaml

      # ✅ 설정 파일 확인
      - name: Ensure ngrok config files exist and are not empty
        run: |
          [ -s backend/ngrok_b.yaml ] || { echo "❌ backend/ngrok_b.yaml is missing or empty"; exit 1; }
          [ -s frontend/ngrok_a.yaml ] || { echo "❌ frontend/ngrok_a.yaml is missing or empty"; exit 1; }

      # ✅ Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # ✅ Backend 이미지 빌드 & 푸시
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest

      # ✅ Frontend 이미지 빌드 & 푸시
      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:latest

      # ✅ ngrok 설정 압축 후 EC2 전송
      - name: Archive ngrok config files
        run: tar -czf ngrok_configs.tar.gz backend/ngrok_b.yaml frontend/ngrok_a.yaml

      - name: Upload ngrok configs to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_KEY }}
          source: ngrok_configs.tar.gz
          target: /home/${{ env.EC2_USERNAME }}

      # ✅ EC2에서 컨테이너 & ngrok 실행
      - name: Deploy to EC2 and Run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /home/${{ env.EC2_USERNAME }}

            echo "📦 Extracting ngrok configs..."
            tar -xzf ngrok_configs.tar.gz
            rm ngrok_configs.tar.gz

            echo "🛑 Removing old containers..."
            docker rm -f backend || true
            docker rm -f frontend || true

            echo "🐳 Running backend container..."
            docker run -d \
              --name backend \
              --restart unless-stopped \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              -p 5000:5000 \
              ${{ env.BACKEND_IMAGE }}:latest

            echo "🐳 Running frontend container..."
            docker run -d \
              --name frontend \
              --restart unless-stopped \
              -p 5173:5173 \
              ${{ env.FRONTEND_IMAGE }}:latest

            echo "🚀 Starting ngrok backend..."
            nohup ngrok start --all --config backend/ngrok_b.yaml > ngrok_backend.log 2>&1 &

            echo "🚀 Starting ngrok frontend..."
            nohup ngrok start --all --config frontend/ngrok_a.yaml > ngrok_frontend.log 2>&1 &
